@using System.Drawing;
@using System;
@using System.Collections
@using System.Collections.Generic;
@using Amazon.Runtime.Internal
@using DependencyMapping.Client.Components
@using DependencyMapping.Client.Helpers
@using DependencyMapping.Client.Models
@using Microsoft.JSInterop;


<g transform="translate(@FCenterX, @FCenterY)">
    @foreach (KeyValuePair<Guid, CustomFunction> function in Functions)
    {
        DoneCounter++;
        ShouldRender();
        @if (Functions.Values.Any(k => ComponentHelper.Distance(ComponentHelper.PlaceX(SpiralVariable),
            ComponentHelper.PlaceY(SpiralVariable), k.X, k.Y) < Radius + Padding))
        {
            IncrementSpiral(function.Value);
        }
        <g @onmouseover="@function.Value.ShowDependencies" @onmouseout="@function.Value.HideDependencies" styles="z-index: @ZIndex">
            <CascadingValue Value="function.Value.Name" Name="Name">
                <Circle X="function.Value.X" Y="function.Value.Y" Radius="@Radius" Color="@Color" Toggled="@Toggled" ToggleCircle="@ToggleCircle" />
            </CascadingValue>
        </g>

    }
</g>

@code {

    [CascadingParameter(Name = "TClusterCenterX")]
    protected double TCenterX { get; set; }

    [CascadingParameter(Name = "TClusterCenterY")]
    protected double TCenterY { get; set; }

    [CascadingParameter(Name = "FClusterCenterX")]
    public double FCenterX { get; set; }

    [CascadingParameter(Name = "FClusterCenterY")]
    public double FCenterY { get; set; }
    
    [Parameter]
    public Dictionary<Guid, CustomFunction> Functions { get; set; }

    [Inject] 
    private IJSRuntime jsRuntime { get; set; }
    
    public bool Toggled { get; set; } = false;

    public string Color => Toggled ? "white" : "green";
    
    public int ZIndex => Toggled ? 3 : 1;

    [Parameter]
    public EventCallback<bool> ChangeZIndex { get; set; }

    public double Radius { get; set; }
    public double SpiralVariable = 1;
    public int DoneCounter = 0;
    public double Padding { get; set; }
    
    protected override bool ShouldRender()
    {
        if (DoneCounter >= Functions.Count)
            return false;
        return base.ShouldRender();
    }

    private async void ToggleCircle(bool input)
    {
        Toggled = input;
        await ChangeZIndex.InvokeAsync(Toggled);
        StateHasChanged();
    }


    private void IncrementSpiral(IEntity entity)
    {
        while (Functions.Values.Any(k => ComponentHelper.Distance(ComponentHelper.PlaceX(SpiralVariable), ComponentHelper.PlaceY(SpiralVariable), k.X, k.Y)
                                         < Radius + Padding))
        {
            SpiralVariable += Radius + Padding;
        }
        entity.X = ComponentHelper.PlaceX(SpiralVariable);
        entity.Y = ComponentHelper.PlaceY(SpiralVariable);
    }

    protected override void OnInitialized()
    {
        Radius = 4;
        Padding = 5;
    }
}