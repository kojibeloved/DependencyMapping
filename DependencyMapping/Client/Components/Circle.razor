@using System.Drawing
@using System.Reflection.Metadata
@using Amazon.Runtime.Internal
@using DependencyMapping.Shared.Models
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

<g @onclick="Toggle">
    <title></title>
    <circle r="@Radius" stroke="black" stroke-width="1" fill="@Color" cx="@X" cy="@Y"/>
    <CascadingValue Value="X" Name="X">
        <CascadingValue Value="Y" Name="Y">
            <EntityMenu @ref="menuRef"/>
        </CascadingValue>
    </CascadingValue>
</g>

@code
{

    [Parameter]
    public double Radius { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter(Name = "Name")]
    public string Name { get; set; }

    [Parameter]
    public EventCallback<bool> ToggleCircle { get; set; }

    [Parameter]
    public bool Toggled { get; set; }

    double? x;

    [Parameter]
    public string Color { get; set; }

    private string OriginalColor { get; set; }

    [Parameter]
    public double X { get; set; }

    public EntityMenu menuRef { get; set; } = new ();

    double? y;

    [Parameter]
    public double Y { get; set; }
    
    public async void Toggle()
    {
        menuRef.ToggleMenu();
        Toggled = !Toggled;
        if (Toggled)
        {
            Color = "white";
        }
        else
        {
            Color = OriginalColor;
        }
        await ToggleCircle.InvokeAsync(Toggled);
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        OriginalColor = Color;
        base.OnParametersSet();
    }

    public Connector.Direction DeterminePositionOfConnection(double x1, double y1, double x2, double y2)
    {
        if (x1 < x2 && y1 < y2)
            return Connector.Direction.Left;
        else if (x1 > x2 && y1 > y2)
            return Connector.Direction.Right;
        else if (x1 < x2 && y1 > y2)
            return Connector.Direction.Top;

        return Connector.Direction.Bottom;
    }

    //public async ValueTask DisposeAsync()
    //{
    //    if (_module != null)
    //    {
    //        var module = await _module;
    //        await module.DisposeAsync();
    //    }
    //}
}
