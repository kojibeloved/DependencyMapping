@using System.Drawing
@using System.Reflection.Metadata
@using Amazon.Runtime.Internal
@using DependencyMapping.Shared.Models
@using Microsoft.JSInterop;
@inject IJSRuntime JsRuntime;
<g @onclick="ToggleMenu">
    <circle r="@Radius" stroke="black" stroke-width="1" fill="@Color" cx="@X" cy="@Y"/>
    <CascadingValue Value="X" Name="X">
        <CascadingValue Value="Y" Name="Y">
            <EntityMenu @ref="menuRef"/>
        </CascadingValue>
    </CascadingValue>
</g>

@code
{
    [Parameter]
    public double Radius { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    double? x;

    [Parameter]
    public string Color { get; set; }

    [Parameter]
    public double X { get; set; }

    public EntityMenu menuRef { get; set; } = new ();

    public bool Toggled { get; set; } = false;

    double? y;

    //bool Toggled;

    [Parameter]
    public double Y { get; set; }

    public void ToggleMenu()
    {
        if (!Toggled)
        {
            menuRef.ShowDependency();
        }
        else
            menuRef.HideDependency();
        //menuRef.DisplayState = !Toggled ? "block" : "none";
        Toggled = !Toggled;
    }

    public Connector.Direction DeterminePositionOfConnection(double x1, double y1, double x2, double y2)
    {
        if (x1 < x2 && y1 < y2)
            return Connector.Direction.Left;
        else if (x1 > x2 && y1 > y2)
            return Connector.Direction.Right;
        else if (x1 < x2 && y1 > y2)
            return Connector.Direction.Top;

        return Connector.Direction.Bottom;
    }


}
