@page "/"
@using DependencyMapping.Client.Models
@using DependencyMapping.Shared.Models
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<PageTitle>Index</PageTitle>

<div id="canvasHolder" style="position: fixed; background-color: magenta; width: 100%; height: 100%">
    <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Map Map;

    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();

    }

    private DateTime LastRender;
    
    [JSInvokable]
    public void ResizeInBlazor(double width, double height) => Map.Resize(width, height);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {

        double fps = 1.0 / (DateTime.Now - LastRender).TotalSeconds;
        LastRender = DateTime.Now;

        await _context.FillTextAsync($"FPS: {fps:0.000}", 10, 50);
        await _context.BeginBatchAsync();

        double sAngle = 0 * Math.PI;
        double eAngle = 1.5 * Math.PI;
        //Some logic getting the actual information about the entities we need to create from database.

        var templateOne = new Template("1","template1", 5, 5, 10);

        Map.Entities.Add(templateOne);

        foreach (var entity in Map.Entities)
        {
            await _context.SetFillStyleAsync(entity.Color);
            await _context.ArcAsync(entity.X, entity.Y, entity.Size, sAngle, eAngle);
            await _context.FillAsync();
            await _context.StrokeAsync();
        }
        await _context.EndBatchAsync();
    }

}
