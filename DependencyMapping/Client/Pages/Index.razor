@page "/"
@using DependencyMapping.Client.Models
@using DependencyMapping.Shared.Models
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@inject IJSRuntime JsRuntime;

<PageTitle>Index</PageTitle>

<div id="canvasHolder" style="position: fixed; background-color: white; width: 100%; height: 100%">
    <BECanvas Width="600" Height="400" @ref="_canvasReference"></BECanvas>
</div>

@code {
    private Map map = new(new List<IEntity>());

    private Canvas2DContext _context;
    protected BECanvasComponent _canvasReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _context = await _canvasReference.CreateCanvas2DAsync();
        await JsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
        await base.OnInitializedAsync();

    }

    [JSInvokable]
    public async Task ResizeInBlazor(double width, double height) => await map.Resize(width, height, _context);

    [JSInvokable]
    public async ValueTask RenderInBlazor(float timeStamp)
    {

        await _context.BeginBatchAsync();

        //Some logic getting the actual information about the entities we need to create from database.

        var templateOne = new Template("1","template1", 50, 50, 20);


        var templateCluster = new Cluster();
        var functionCluster = new Cluster();
        map.Clusters.Add(templateCluster);
        map.Clusters.Add(functionCluster);

        map.Entities.Add(templateOne);

        foreach (var cluster in map.Clusters)
            await cluster.DrawCluster(cluster.X, cluster.Y, _context);

        foreach (var entity in map.Entities)
            await entity.DrawEntity(entity.X, entity.Y, entity.Size, entity.Color, entity.SAngle, entity.EAngle, _context);

        await _context.EndBatchAsync();
    }

}
